/*
https://leetcode.com/problems/minimize-malware-spread/

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected
and at least one of those two nodes is infected by malware, both nodes will be infected by malware.
This spread of malware will continue until no more nodes can be infected in this manner.
Suppose M(initial) is the final number of nodes infected with malware in the entire network,
after the spread of malware stops.
We will fix one node from the initial list.  Return the node that if fixd, would minimize M(initial).
If multiple nodes could be fixd to minimize M(initial), return such a node with the smallest number.
Note that if a node was fixd from the initial list of infected nodes,
it may still be infected later as a result of the malware spread.

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
*/

class Solution {
public:

class UnionFind {
	// vector<int> p;
	int* p;
public:
	UnionFind(int n) {
		// p.resize(n+1,0);
		p = new int[n+1];
		for (int i=0; i<=n; i++) p[i]=i;
	}
	int find(int x) {
		if (p[x] == x) return p[x];
		return	p[x] = find(p[x]);
	}
	void join(int x, int y) {
		x = find(x), y = find(y);
		if (x != y)	p[x] = y;
	}
};

int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
	int n = graph.size();
	UnionFind uf(n);
	for (int i=0; i<n; i++)
		for (int j=0; j<n; j++)
			if (graph[i][j]==1) uf.join(i,j);

	vector<int> area(n,0), malware(n,0);
	for (int i=0; i<n; i++) area[uf.find(i)]++;
	for (auto i:initial) malware[uf.find(i)]++;

	int maxArea = 0, ans = *min_element(initial.begin(), initial.end());
	for (int i:initial) {
		int p = uf.find(i);
		if (malware[p] != 1) continue;
		if (area[p] > maxArea) maxArea=area[p], ans=i;
		else if (area[p]==maxArea) ans=min(ans,i);
	}
	return ans;
}};


static auto _______ = [](){
	std::ios::sync_with_stdio(false);
	std::cin.tie(NULL);
	std::cout.tie(NULL);
	return 0;
}();